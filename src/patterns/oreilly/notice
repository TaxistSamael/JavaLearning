Принципы проектирования:
1. Инкапсулировать изменяющиеся сущности
2. Программирование на уровне интерфейсов, а не реализаций
3. Композиция предпочтительней наследования
- такие системы более гибкие
- могут изменять поведение объектов
4. Стремление к слабой связанности
5. Открытые для расширения и закрытые для изменения.
6. Принцип инверсии зависимостей: код должен зависеть от абстракций, а не от конкретных реализаций.

Задачи паттернов:
- расширяемость
- гибкость
- переиспользование

Зачем нужны паттерны?
1. Паттерны обладают большей выразительностью, улучшают коммуникацию.
2. Паттерны позволяют думать понятиями "архитектуры"
3. Паттерны лучше передают идею реализации

Советы использования принципа инверсии зависимостей:
1. ссылки на конкретные классы не должны храниться в переменных (если не брать в расчёт модели)
(не создавай объекты! Используй фабрику
2. В архитектуре не должно быть классов, производных от конкретных классов!
Наследование от конкретного класса создает зависимость от него.
3. Методы не должны переопределять методы базовых классов

- чекнуть высокоуровневые паттерны: MVC, MVP, MVVM, MVI...
