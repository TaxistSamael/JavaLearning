Спорно то, что "простая фабрика" считается паттерном проектрования.
Есть мнение, что это идиома программирования.

Почему фабрика: паттерн фабрика представляет собой реализацию open-close principle.
Без использования фабрики при добавление/удалении типа происходят множественные изменения кода.

Полиморфный код (реализация на уровне интерфейса) дает возможность работать с разными типами.

ЧТО ДАЕТ фабрика:
п - Переиспользование. Фабрика может быть использована многими клиентами.
п - Полиморфизм. Полиморфный код гибкий.
и - Инкапсуляция. Инкапсулирован код создания объектов.
и - Изменение реализации в процессе выполнения. Можно заменять фабрики в рантайме.

FACTORY METHOD (VIRTUAL CONSTRUCTOR) - позволяет классам наследникам принимать решение относительно создания объекта.
В фабричном методе инкапсулируются различия при создании объектов.
Суть: клиентский код не вызывает методы фабрики напрямую. Фабричный метод изолирует клиента от информации о конкретном типе.

FACTORY METHOD Определение:
Определяет интерфейс создания объекта, но позволяет субклассам выбрать класс создаваемого экземпляра.
Фабричный метод делегирует операцию создания объектов субклассам.

FACTORY реализует принцип инверсии зависимостей: код должен зависеть от абстракций, а не от конкретных классов!

ABSTRACT FACTORY предоставляет интерфейс семейств взаимосвязей или взаимозависимых объектов без указани
их конкретных классов.

Абстрактная фабрика отделяет код создания продуктов от фабрики.
Таким образом создаются отдельные фабрики для разных контекстов.

В терминах фабричного метода:
Pizza - Product
CheesePizza - ConcreteProduct (реализует интерфейс Product)
AbstractPizzaStore - Creator. Объявляет FactoryMethod(), который возвращает объекта типа Product. Может содержать реализацию этого метода по-умолчанию. Может вызывать фабричный метод.
NyPizzaStore - ConcreteCreator. конкретный создатель. Переопределяет фабричный метод.







